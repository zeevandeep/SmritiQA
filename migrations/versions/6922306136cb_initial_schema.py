"""Initial schema

Revision ID: 6922306136cb
Revises: 
Create Date: 2025-07-21 14:09:39.233104

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '6922306136cb'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('nodes')
    op.drop_table('user_profiles')
    op.drop_table('users')
    op.drop_table('feedback')
    op.drop_index('idx_migration_errors_created_at', table_name='migration_errors')
    op.drop_index('idx_migration_errors_session_id', table_name='migration_errors')
    op.drop_index('idx_migration_errors_user_id', table_name='migration_errors')
    op.drop_table('migration_errors')
    op.drop_table('sessions')
    op.drop_table('edges')
    op.drop_table('reflections')
    op.drop_index('idx_refresh_tokens_expires_at', table_name='refresh_tokens')
    op.drop_index('idx_refresh_tokens_token', table_name='refresh_tokens')
    op.drop_index('idx_refresh_tokens_user_id', table_name='refresh_tokens')
    op.drop_table('refresh_tokens')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('refresh_tokens',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('token', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('expires_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('issued_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('is_valid', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='refresh_tokens_user_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='refresh_tokens_pkey'),
    sa.UniqueConstraint('token', name='refresh_tokens_token_key')
    )
    op.create_index('idx_refresh_tokens_user_id', 'refresh_tokens', ['user_id'], unique=False)
    op.create_index('idx_refresh_tokens_token', 'refresh_tokens', ['token'], unique=False)
    op.create_index('idx_refresh_tokens_expires_at', 'refresh_tokens', ['expires_at'], unique=False)
    op.create_table('reflections',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('generated_text', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('generated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('is_reflected', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('confidence_score', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('node_ids', postgresql.ARRAY(sa.UUID()), server_default=sa.text("'{}'::uuid[]"), autoincrement=False, nullable=False),
    sa.Column('edge_ids', postgresql.ARRAY(sa.UUID()), autoincrement=False, nullable=True),
    sa.Column('feedback', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('is_viewed', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('is_encrypted', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.CheckConstraint('confidence_score >= 0::double precision AND confidence_score <= 1::double precision', name='check_confidence_score'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='reflections_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='reflections_pkey')
    )
    op.create_table('edges',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('from_node', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('to_node', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('edge_type', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('match_strength', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('session_relation', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('explanation', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('is_processed', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.CheckConstraint("edge_type = ANY (ARRAY['thought_progression'::text, 'emotion_shift'::text, 'belief_mutation'::text, 'contradiction_loop'::text, 'mixed_transition'::text, 'avoidance_drift'::text, 'recurrence_theme'::text, 'recurrence_emotion'::text, 'recurrence_belief'::text, 'default'::text, 'theme_repetition'::text, 'identity_drift'::text, 'emotional_contradiction'::text, 'belief_contradiction'::text, 'unresolved_loop'::text, 'belief_evolution'::text])", name='check_edge_type'),
    sa.CheckConstraint("session_relation = ANY (ARRAY['intra_session'::text, 'cross_session'::text])", name='check_session_relation'),
    sa.CheckConstraint('match_strength >= 0::double precision AND match_strength <= 1::double precision', name='check_match_strength'),
    sa.ForeignKeyConstraint(['from_node'], ['nodes.id'], name='edges_from_node_fkey'),
    sa.ForeignKeyConstraint(['to_node'], ['nodes.id'], name='edges_to_node_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='edges_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='edges_pkey')
    )
    op.create_table('sessions',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('duration_seconds', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('raw_transcript', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('is_processed', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('is_encrypted', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='sessions_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='sessions_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('migration_errors',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('session_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('error_type', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('error_message', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='migration_errors_pkey')
    )
    op.create_index('idx_migration_errors_user_id', 'migration_errors', ['user_id'], unique=False)
    op.create_index('idx_migration_errors_session_id', 'migration_errors', ['session_id'], unique=False)
    op.create_index('idx_migration_errors_created_at', 'migration_errors', ['created_at'], unique=False)
    op.create_table('feedback',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('feedback_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('subject', sa.VARCHAR(length=200), autoincrement=False, nullable=False),
    sa.Column('message', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('rating', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('contact_email', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=20), server_default=sa.text("'new'::character varying"), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.CheckConstraint("feedback_type::text = ANY (ARRAY['suggestion'::character varying, 'bug'::character varying, 'compliment'::character varying, 'rating_only'::character varying]::text[])", name='feedback_feedback_type_check'),
    sa.CheckConstraint("status::text = ANY (ARRAY['new'::character varying, 'reviewed'::character varying, 'resolved'::character varying]::text[])", name='feedback_status_check'),
    sa.CheckConstraint('rating >= 1 AND rating <= 5', name='feedback_rating_check'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='feedback_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='feedback_pkey')
    )
    op.create_table('users',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('email', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('password_hash', sa.VARCHAR(length=256), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='users_pkey'),
    sa.UniqueConstraint('email', name='users_email_key'),
    postgresql_ignore_search_path=False
    )
    op.create_table('user_profiles',
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('display_name', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('birthdate', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('gender', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('language', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('profile_image_url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('tour_completed', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='user_profiles_user_id_fkey'),
    sa.PrimaryKeyConstraint('user_id', name='user_profiles_pkey')
    )
    op.create_table('nodes',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('session_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('text', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('emotion', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('theme', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('cognition_type', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('embedding', postgresql.BYTEA(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('is_processed', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('is_encrypted', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['session_id'], ['sessions.id'], name='nodes_session_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='nodes_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='nodes_pkey')
    )
    # ### end Alembic commands ###
